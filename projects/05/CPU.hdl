// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Handle A-instruction
    Mux16    (a=instruction[0..14], b=aluOutputToA, sel=instruction[15], out=aInput);

    // A Register
    Not      (in=instruction[15], out=isAInstruction);
    Or       (a=isAInstruction, b=saveToA, out=loadA);

    Register (in=aInput, load=loadA, out=regAOutput);

    // D Register
    Register (in=aluOut, load=saveToD, out=dOut);

    // Handle C-instruction
    // Handle a bit
    Mux16 (a=aOut, b=inM, sel=instruction[3], out=selectedY);

    // Handle d[3] bits
    And   (a=instruction[15], b=instruction[10], out=saveToA);  // if d[0] == 1 { save in A; }
    And   (a=instruction[15], b=instruction[11], out=saveToD);  // if d[1] == 1 { save in D; }
    And   (a=instruction[15], b=instruction[12], out=writeM);   // if d[2] == 1 { save in M; }

    // Handle j[3] bits
    
    // Handle c[6] bits
    
    // ALU
    ALU (
        // IN:
        x=dOut,            // x = D-register
        y=selectedY,       // y = A-register or M-register
        zx=instruction[4], // c1 = instruction[4] = zero x
        nx=instruction[5], // c2 = instruction[5] = negate x
        zy=instruction[6], // c3 = instruction[6] = zero y
        ny=instruction[7], // c4 = instruction[7] = negate y
        f =instruction[8], // c5 = instruction[8] = compute x+y or x & y
        no=instruction[9], // c6 = instruction[9] = negate out
        // OUT:
        out=aluOut,   // 16-bit output
        zr=,          // 1 if (out ==0), 0 otherwise
        ng=,          // 1 if (out < 0), 1 otherwise
    );
}
