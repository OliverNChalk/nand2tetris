// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // 0..14 of address to RAM16K
    // 0..15 of address to Screen
    // if address[14] == 1 && address[13] == 0, return screen
    // if address[14] == 1 && address[13] == 1, return keyboard
    // TODO: Could run And16 on remaining bits to ensure no out of range error
    // Would just run in the case of keyboard

    // Is ram selected?
    Not      (in=address[13], out=not13);
    Not      (in=address[14], out=ramSelected);

    // Is screen selected?
    And      (a=not13, b=address[14], out=screenSelected);

    // If keyboard selected?
    Not      (in=ramSelected, out=notRamSelected);
    Not      (in=screenSelected, out=notScreenSelected);
    And      (a=notRamSelected, b=notScreenSelected, out=keyboardSelected);

    // Should we load ram/screen?
    And      (a=load, b=ramSelected, out=loadRam);
    And      (a=load, b=screenSelected, out=loadScreen);

    // Feed memory banks with inputs
    RAM16K   (in=in, load=loadRam, address=address[0..13], out=ramOut);
    Screen   (in=in, load=loadScreen, address=address[0..12], out=screenOut);
    Keyboard (out=keyboardOut);

    // Filter outputs
    Mux16    (a=ramOut, b=screenOut, sel=screenSelected, out=ramOrScreenOut);
    Mux16    (a=keyboardOut, b=ramOut, sel=ramSelected, out=keyboardOrRamOut);
    Mux16    (a=ramOrScreenOut, b=keyboardOrRamOut, sel=keyboardSelected, out=out);
}
