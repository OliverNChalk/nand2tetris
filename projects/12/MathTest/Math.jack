// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array pow2;

    /** Initializes the library. */
    function void init() {
        var int i, val;

        let pow2 = Array.new(16);
        let i = 0;
        let val = 1;
        while (i < 16) {
            let pow2[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            let x = -x;
        }

        return x;
    }

    /** Returns the product of x and y.
     *  When a Jack compiler detects the multiplication operator '*' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int i, sum, shiftedX;
        let i = 0;
        let sum = 0;
        let shiftedX = x;

        while (i < 16) {
            if (Math.bitN(y, i) = 1) {
                let sum = sum + shiftedX;
            }

            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }

        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int q, x_neg, y_neg, result_abs;

        let x_neg = x < 0;
        let y_neg = y < 0;
        let x = Math.abs(x);
        let y = Math.abs(y);

        if (y > x) {
            return 0;
        }

        let q = x / (y + y);
        if ((x - (2 * q * y)) < y) {
            let result_abs = q + q;
        } else {
            let result_abs = q + q + 1;
        }

        if (x_neg = y_neg) {
            return result_abs;
        } else {
            return -result_abs;
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int i, y, guess, guess_squared;

        let y = 0;
        let i = 8;
        while (i > 0) {
            let i = i - 1;
            let guess = y + pow2[i];
            let guess_squared = guess * guess;
            // NB: guess_squared can overflow which will produce a negative
            // value which is not a valid root.
            if ((~(guess_squared > x)) & (guess_squared > 0)) {
                let y = guess;
            }
        }

        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a > b) {
            return a;
        }

        return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a < b) {
            return a;
        }

        return b;
    }

    function int bitN(int a, int i) {
        let a = -((a & pow2[i]) = pow2[i]);

        return a;
    }
}
