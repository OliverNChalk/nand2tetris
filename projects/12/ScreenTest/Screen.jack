// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static int color, colorMultiplier;
    static Array mask, screen;

    /** Initializes the Screen. */
    function void init() {
        var int i, val;

        // Initialize the bitmask array.
        let mask = Array.new(16);
        let val = 1;
        while (i < 16) {
            let mask[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        // Set screen base address.
        let screen = 16384;

        // Default color to true (on).
        let color = 1;
        let colorMultiplier = 1;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        if (b) {
            let color = 1;
            let colorMultiplier = 1;
        } else {
            let color = 0;
            let colorMultiplier = -1;
        }

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        // 512 wide
        // 256 high
        //
        // - To write to the 0th row start at base.
        // - To write to the 1st row start at base + 512.
        // - To write to the nth row start at base + (512 * n).
        // - To write to the nth column do base + row + (n / 16);

        var int chunk, chunkVal, index;

        // Compute the chunk of memory this pixel is contained in.
        let chunk = (512 * y) + (x / 16);
        let chunkVal = screen[chunkVal];
        let index = x - ((x / 16) * 16);

        // Bail if the pixel is already the target color.
        if (Screen.bitN(chunkVal, index) = color) {
            return;
        }

        // Update the pixel & write the chunk back to the screen.
        let screen[chunk] = chunkVal + (mask[index] * colorMultiplier);

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }

    function int bitN(int a, int i) {
        let a = -((a & mask[i]) = mask[i]);

        return a;
    }
}
