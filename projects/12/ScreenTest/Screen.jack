// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color;
    static Array mask, screen;

    /** Initializes the Screen. */
    function void init() {
        var int i, val;

        let mask = Array.new(16);
        let val = 1;
        let i = 0;
        while (i < 16) {
            let mask[i] = val;
            let val = val + val;
            let i = i + 1;
        }

        // Set screen base address.
        let screen = 16384;

        // Default color to true (on).
        let color = true;

        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;

        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int chunk, chunkVal, index;

        // Compute the chunk of memory this pixel is contained in.
        let chunk = (32 * y) + (x / 16);
        let index = x - ((x / 16) * 16);

        // Update the pixel & write the chunk back to the screen.
        if (color) {
            let screen[chunk] = screen[chunk] | mask[index];
        } else {
            let screen[chunk] = screen[chunk] & ~mask[index];
        }

        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy, a, b, diff;

        // Handle dy = 0 as a special case.
        if (y1 = y2) {
            do Screen.drawHorizontalLine(x1, x2, y1);
        }

        let x = x1;
        let y = y1;
        // TODO: What about drawing a line right to left? Should sort the points first?
        let dx = x2 - x1;
        let dy = y2 - y1;

        while (~(a > dx) & ~(b > dy)) {
            do Screen.drawPixel(x + a, y + b);

            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }

        return;
    }

    function void drawHorizontalLine(int x1, int x2, int y) {
        while (x1 < x2) {
            do Screen.drawPixel(x1, y);
            let x1 = x1 + 1;
        }

        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        return;
    }

    function int bitN(int a, int i) {
        let a = -((a & mask[i]) = mask[i]);

        return a;
    }
}
