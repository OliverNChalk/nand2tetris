// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:

    // Update register if any of reset, load, and inc bits are set
    Or8Way (in[0]=reset, in[1]=load, in[2]=inc, out=shouldLoad);

    // Prioritze reset over load over inc
    Mux16 (a=in, b=false, sel=reset, out=resetLoad);
    Add16 (a=currentCount, b[0]=true, out=incrementedCount);

    Or    (a=load, b=reset, out=shouldResetOrLoad);
    Not   (in=shouldResetOrLoad, out=shouldNotResetOrLoad);
    And   (a=shouldNotResetOrLoad, b=inc, out=shouldInc);
    Mux16 (a=resetLoad, b=incrementedCount, sel=shouldInc, out=registerIn);

    // Save next count to register, route current value to out
    Register (in=registerIn, load=shouldLoad, out=currentCount, out=out);
}
